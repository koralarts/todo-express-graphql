# This is a basic workflow to help you get started with Actions

name: CI to Docker Hub

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
#   build:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - name: Checkout Repo
#         uses: actions/checkout@v2
        
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1
        
#       - name: Login to Docker Hub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKER_HUB_USERNAME }}
#           password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

#       - name: Build and push
#         id: docker_build
#         uses: docker/build-push-action@v2
#         with:
#           push: true
#           tags: ${{ secrets.DOCKER_HUB_USERNAME }}/todo-express-graphql:latest

#       - name: Image digest
#         run: echo ${{ steps.docker_build.outputs.digest }}
  
  deploy:
    runs-on: ubuntu-latest
#     needs: [build]
    
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/deploy.key
          chmod 600 ~/.ssh/deploy.key
          cat >> ~/.ssh/config << END
          Host deploy
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/deploy.key
            StrictHostKeyChecking no
          END
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          
      - name: Stop and Delete Container
        run: ssh deploy 'docker stop api && docker rm api'
          
      - name: Pull Image
        run: ssh deploy 'docker pull $DOCKER_TAG && docker prune -f'
        env:
          DOCKER_TAG: ${{ secrets.DOCKER_TAG }}
        
      - name: Start Container
        run: ssh deploy 'docker run -e SECRET_JWT -p 80:3000 --name api -d $DOCKER_TAG'
        env:
          DOCKER_TAG: ${{ secrets.DOCKER_TAG }}
